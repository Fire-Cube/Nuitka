- "module-name": "boto3"
  "data-files":
    "dirs":
      - "data"

- "module-name": "botocore"
  "data-files":
    "dirs":
      - "data"
    "patterns":
      - "cacert.pem"

- "module-name": "site"
  "data-files":
    "patterns":
      - "orig-prefix.txt"

- "module-name": "nose.core"
  "data-files":
    "patterns":
      - "usage.txt"

- "module-name": "scrapy"
  "data-files":
    "patterns":
      - "VERSION"

- "module-name": "dask"
  "data-files":
    "patterns":
      - "dask.yaml"

- "module-name": "cairocffi"
  "data-files":
    "patterns":
      - "VERSION"

- "module-name": "cairosvg"
  "data-files":
    "patterns":
      - "VERSION"

- "module-name": "weasyprint"
  "data-files":
    "dirs":
      - "css"
    "patterns":
      - "VERSION"

- "module-name": "tinycss2"
  "data-files":
    "patterns":
      - "VERSION"

- "module-name": "certifi"
  "data-files":
    "patterns":
      - "cacert.pem"

- "module-name": "importlib_resources"
  "data-files":
    "patterns":
      - "version.txt"

- "module-name": "moto"
  "anti-bloat":
    - "replacements":
        "imp.find_module('pytest')": "'None'"
  "data-files":
    "patterns":
      - "ec2/resources/instance_types.json"
      - "ec2/resources/amis.json"

- "module-name": "skimage"
  "data-files":
    "dirs":
      - "data"
    "patterns":
      - "io/_plugins/fits_plugin*.ini"

- "module-name": "skimage.feature._orb_descriptor_positions"
  "data-files":
    "patterns":
      - "orb_descriptor_positions.txt"

- "module-name": "lib2to3.pgen2"
  "data-files":
    "dest_path": "lib2to3"
    "patterns":
      - "../*.pickle"

- "module-name": "eel"
  "data-files":
    "patterns":
      - "eel.js"

- "module-name": "Cryptodome.Util._raw_api"
  "data-files":
    "empty_dirs":
      - "."

- "module-name": 'Crypto.Util._raw_api"'
  "data-files":
    "empty_dirs":
      - "."

- "module-name": "pendulum"
  "data-files":
    "empty_dir_structures":
      - "locales"

- "module-name": "sklearn.datasets"
  "data-files":
    "dirs":
      - "data"
      - "descr"

- "module-name": "osgeo"
  "data-files":
    "dirs":
      - "data"

- "module-name": "pyphen"
  "data-files":
    "dirs":
      - "dictionaries"

- "module-name": "pytz"
  "data-files":
    "dirs":
      - "zoneinfo"

- "module-name": "pytzdata"
  "data-files":
    "dirs":
      - "zoneinfo"

- "module-name": "tzdata"
  "data-files":
    "dirs":
      - "zones"

- "module-name": "pywt"
  "data-files":
    "dirs":
      - "data"

- "module-name": "xarray"
  "data-files":
    "dirs":
      - "static"

- "module-name": "gooey"
  "data-files":
    "dirs":
      - "languages"
      - "images"

- "module-name": "jsonschema"
  "data-files":
    "dirs":
      - "schemas"

- "module-name": "xmlschema"
  "data-files":
    "dirs":
      - "schemas"

- "module-name": "openapi_spec_validator"
  "data-files":
    "dirs":
      - "resources/schemas"

- "module-name": "kivy"
  "data-files":
    "dirs":
      - "data"

- "module-name": "kivymd"
  "data-files":
    "dirs":
      - "fonts"
      - "images"

- "module-name": "arcade"
  "data-files":
    "dirs":
      - "resources"

- "module-name": "seedir.printing"
  "data-files":
    "patterns":
      - "words.txt"

- "module-name": "pygsheets"
  "data-files":
    "dirs":
      - "data"

- "module-name": "jaraco.text"
  "data-files":
    "control_tags":
      - "anti-bloat"
    "patterns":
      - "Lorem ipsum.txt"

- "module-name": "shapely.geos"
  "dlls":
    - "dest_path": "shapely"
      "dll_filename_code": "shapely.geos._lgeos._name"
      "include_from_code": ""
      "setup_code": "import shapely.geos"

- "module-name": "vosk"
  "dlls":
    - "dest_path": "vosk"
      "dir": "."
      "include_from_filenames": ""
      "patterns":
        - "libvosk"

- "module-name": "tensorflow.lite.experimental.microfrontend.python.ops.audio_microfrontend_op"
  "dlls":
    - "dest_path": "tensorflow/lite/experimental/microfrontend/python/ops"
      "dir": "."
      "include_from_filenames": ""
      "patterns":
        - "_audio_microfrontend_op"

- "module-name": "psutil"
  "anti-bloat":
    - "context":
        - "import psutil"
      "description": "resolve platform specific imports at compile time"
      "replacements":
        "from ._common import AIX": "'AIX = %r' % psutil.AIX"
        "from ._common import BSD": "'BSD = %r' % psutil.BSD"
        "from ._common import FREEBSD": "'FREEBSD = %r' % + psutil.FREEBSD"
        "from ._common import LINUX": "'LINUX = %r' % + psutil.LINUX"
        "from ._common import MACOS": "'MACOS = %r' % + psutil.MACOS"
        "from ._common import NETBSD": "'NETBSD = %r' % + psutil.NETBSD"
        "from ._common import OPENBSD": "'OPENBSD = %r' % + psutil.OPENBSD"
        "from ._common import OSX": "'OSX = %r' % psutil.OSX"
        "from ._common import POSIX": "'POSIX = %r' % psutil.POSIX"
        "from ._common import SUNOS": "'SUNOS = %r' % psutil.SUNOS"
        "from ._common import WINDOWS": "'WINDOWS = %r' % psutil.WINDOWS"

- "module-name": "cffi.ffiplatform"
  "anti-bloat":
    - "description": "disable distutils hacks"
      "replacements":
        "import setuptools": "'pass'"

- "module-name": "cffi.api"
  "anti-bloat":
    - "change_function":
        "distutils_extension": "'(lambda: None)'"
      "description": "disable distutils extension build"

- "module-name": "sklearn.random_projection"
  "anti-bloat":
    - "description": "remove numpy testing framework"
      "replacements":
        "from numpy.testing import assert_equal": "r'assert_equal = (lambda actual, desired, err_msg=None, verbose=True: True)'"

- "module-name": "sklearn.utils._testing"
  "anti-bloat":
    - "description": "remove pytest testing framework"
      "replacements":
        "import pytest": "'raise ImportError'"

- "module-name": "matplotlib"
  "anti-bloat":
    - "change_function":
        "_init_tests": "'None'"
        "test": "'None'"
      "description": "remove setuptools and pytest testing framework reference"
      "replacements":
        '(root / ".git").exists()"': "'None'"
        "test.__test__ = False": ""

- "module-name": "matplotlib.backend_bases"
  "anti-bloat":
    - "change_function":
        "_fix_ipython_backend2gui": "'(lambda cls: None)'"
      "control_tags":
        - "allow_ipython"
      "description": "remove IPython reference"

- "module-name": "matplotlib.pyplot"
  "anti-bloat":
    - "change_function":
        "install_repl_displayhook": "'(lambda: None)'"
        "uninstall_repl_displayhook": "'(lambda: None)'"
      "control_tags":
        - "allow_ipython"
      "description": "remove IPython reference"

- "module-name": "PIL.ImageShow"
  "anti-bloat":
    - "description": "remove IPython reference"
      "replacements":
        "from IPython.display import display as ipython_display": "'raise ImportError'"

- "module-name": "numpy.ctypeslib"
  "anti-bloat":
    - "context":
        - "import numpy.distutils.misc_util"
      "description": "remove numpy.distutils references"
      "replacements":
        "from numpy.distutils.misc_util import get_shared_lib_extension": ""
        "get_shared_lib_extension()": "repr(numpy.distutils.misc_util.get_shared_lib_extension())"
        "get_shared_lib_extension(is_python_ext=True)": "repr(numpy.distutils.misc_util.get_shared_lib_extension(is_python_ext=True))"

- "module-name": "numpy.testing"
  "anti-bloat":
    - "description": "remove numpy testing framework"
      "module_code": |
        from contextlib import contextmanager
        class Tester:
          test = None
          bench = None

        def assert_allclose(*args, **kwargs):
          return True

        @contextmanager
        def suppress_warnings(forwarding_rule="always"):
          yield

        @contextmanager
        def _assert_warns_context(warning_class, name=None):
            yield

        def assert_warns(warning_class, *args, **kwargs):
          if not args:
              return _assert_warns_context(warning_class)

          func = args[0]
          args = args[1:]
          with _assert_warns_context(warning_class, name=func.__name__):
              return func(*args, **kwargs)
- "module-name": "numpy._pytesttester"
  "anti-bloat":
    - "description": "remove numpy testing framework"
      "module_code": |
        class PytestTester:
          def __init__(self, name):
            pass
- "module-name": "numpy.testing._private.pytesttester"
  "anti-bloat":
    - "description": "remove numpy testing framework"
      "module_code": |
        class PytestTester:
          def __init__(self, name):
            pass
- "module-name": "numpy.core.overrides"
  "anti-bloat":
    - "description": "workaround numpy issues with compiled code"
      "replacements":
        "add_docstring(implementation, dispatcher.__doc__)": "'''add_docstring(implementation, dispatcher.__doc__ or '')'''"
        "public_api.__code__ = ": ""

- "module-name": "scipy.stats.morestats"
  "anti-bloat":
    - "description": "remove numpy testing framework"
      "replacements":
        "@setastest(False)": ""
        "from numpy.testing.decorators import setastest": ""

- "module-name": "scipy.lib.numpy_compat"
  "anti-bloat":
    - "description": "remove numpy testing framework"
      "replacements":
        "NumpyVersion(np.__version__) > '1.7.0.dev'": "'0'"
        "from numpy.testing import suppress_warnings": 'r''suppress_warnings = __import__("contextmanager").contextmanager(lambda : (yield))'''

- "module-name": "scipy._lib._numpy_compat"
  "anti-bloat":
    - "description": "remove numpy testing framework"
      "replacements":
        "NumpyVersion(np.__version__) > '1.7.0.dev'": "'0'"
        "from numpy.testing import suppress_warnings": 'r''suppress_warnings = __import__("contextmanager").contextmanager(lambda : (yield))'''

- "module-name": "scipy._lib._testutils"
  "anti-bloat":
    - "description": "remove numpy testing framework"
      "module_code": |
        class PytestTester:
          def __init__(self, name):
            pass
- "module-name": "scipy.integrate._quadrature"
  "anti-bloat":
    - "change_function":
        "_copy_func": "'(lambda f: f)'"
      "description": "remove useless function copying"
  "implicit-imports":
    "depends":
      - ".python.keras"

- "module-name": "tensorflow"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        "_site.ENABLE_USER_SITE": "'False'"
        "if _running_from_pip_package()": "'if False'"
        "import distutils as _distutils": "'_distutils = None'"
        "import site as _site": "'_site = None'"

- "module-name": "tensorflow.python.ops.distributions.distribution"
  "anti-bloat":
    - "change_function":
        "_copy_fn": "'(lambda fn: fn)'"
      "description": "remove useless function copying"
      "replacements":
        "class_attr_value.__doc__ = _update_docstring": "'class_attr_value___doc__ = _update_docstring'"

- "module-name": "tensorflow.python.framework.meta_graph"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        "distutils_version.LooseVersion": "'str'"
        "from distutils import version as distutils_version": ""

- "module-name": "tensorflow.python.compiler.tensorrt.utils"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        "distutils_version.LooseVersion": "'str'"
        "from distutils import version as distutils_version": ""

- "module-name": "tensorflow.lite.python.convert"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        "distutils.spawn.find_executable(_deprecated_conversion_binary) is None": "'False'"
        "import distutils.spawn": ""

- "module-name": "gevent._util"
  "anti-bloat":
    - "change_function":
        "postreleaser_before": "'(lambda data: None)'"
        "prereleaser_middle": "'(lambda data: None)'"
      "description": "remove gevent release framework"

- "module-name": "inspect"
  "anti-bloat":
    - "change_function":
        "_main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "sysconfig"
  "anti-bloat":
    - "change_function":
        "_main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "ensurepip"
  "anti-bloat":
    - "change_function":
        "_main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "ensurepip._uninstall"
  "anti-bloat":
    - "change_function":
        "_main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "pyclbr"
  "anti-bloat":
    - "change_function":
        "_main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "pydoc"
  "anti-bloat":
    - "change_function":
        "gui": "'(lambda : None)'"
      "description": "remove module ability to display GUI with tkinter and topics data"
      "replacements":
        "import pydoc_data.topics": "'raise ImportError'"

- "module-name": "mimetypes"
  "anti-bloat":
    - "change_function":
        "_main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "tarfile"
  "anti-bloat":
    - "change_function":
        "main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "quopri"
  "anti-bloat":
    - "change_function":
        "main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "zipfile"
  "anti-bloat":
    - "change_function":
        "main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "gzip"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
        "main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "base64"
  "anti-bloat":
    - "change_function":
        "main": "'(lambda: None)'"
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "ast"
  "anti-bloat":
    - "change_function":
        "main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "tokenize"
  "anti-bloat":
    - "change_function":
        "main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "keyword"
  "anti-bloat":
    - "change_function":
        "main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "tabnanny"
  "anti-bloat":
    - "change_function":
        "main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "trace"
  "anti-bloat":
    - "change_function":
        "main": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "uu"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "xmllib"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "mhlib"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "sgmllib"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "imghdr"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "audiodev"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "BaseHTTPServer"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "sndhdr"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "ftplib"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "mailcap"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "lib2to3.pgen2.literals"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "rexec"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "modulefinder"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "StringIO"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "fpformat"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "telnetlib"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "ctypes.util"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "formatter"
  "anti-bloat":
    - "change_function":
        "test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "pickletools"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "random"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "dis"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "threading"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "xml.sax.xmlreader.py"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "doctest"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "difflib"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "Cookie"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"
  "implicit-imports":
    "depends":
      - "_bootlocale"

- "module-name": "locale"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "binhex"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "copy"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "pickle"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "Bastion"
  "anti-bloat":
    - "change_function":
        "_test": "'(lambda: None)'"
      "description": "remove module ability to run as a binary"

- "module-name": "h5py"
  "anti-bloat":
    - "change_function":
        "enable_ipython_completer": "'(lambda: None)'"
        "run_tests": "'(lambda args=None: None)'"
      "description": "remove h5py testing framework and interactive IPython completer"

- "module-name": "pandas"
  "anti-bloat":
    - "description": "remove pandas testing framework"
      "replacements":
        "from pandas.util._tester import test": ""
        "import pandas.testing": ""

- "module-name": "pandas._testing"
  "anti-bloat":
    - "change_function":
        "external_error_raised": "'(lambda: None)'"
        "round_trip_localpath": "'(lambda: None)'"
        "round_trip_pathlib": "'(lambda: None)'"
      "description": "remove pytest testing framework"

- "module-name": "pandas._testing._io"
  "anti-bloat":
    - "change_function":
        "network": "'(lambda: None)'"
        "round_trip_localpath": "'(lambda: None)'"
        "round_trip_pathlib": "'(lambda: None)'"
      "description": "remove pytest testing framework"

- "module-name": "pandas.compat._optional"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        "distutils.version.LooseVersion(version) < minimum_version": "'False'"
        "import distutils.version": "''"

- "module-name": "pandas.core.computation.ops"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        'NUMEXPR_VERSION < LooseVersion("2.6.9")': "'False'"
        "from distutils.version import LooseVersion": "''"

- "module-name": "pandas.io.excel._base"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        "LooseVersion(xlrd.__version__)": "'xlrd.__version__'"
        "from distutils.version import LooseVersion": "''"

- "module-name": "pandas.core.util.numba_"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        'LooseVersion(numba.__version__) >= LooseVersion("0.49.0")': "'True'"
        "from distutils.version import LooseVersion": "''"

- "module-name": "pandas.plotting._matplotlib.compat"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        "from distutils.version import LooseVersion": "''"
        "op(LooseVersion(mpl.__version__), LooseVersion(version))": "'op(mpl.__version__, version)'"

- "module-name": "pandas.core.arrays._arrow_utils"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        'LooseVersion(pyarrow.__version__) >= LooseVersion("0.15")': '''pyarrow.__version__ >= "0.15"'''
        "from distutils.version import LooseVersion": "''"

- "module-name": "pandas.core.arrays.string_arrow"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        'LooseVersion(pa.__version__) < "1.0.0"': '''pa.__version__ < "1.0.0"'''
        "from distutils.version import LooseVersion": "''"

- "module-name": "pandas.io.parquet"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        'LooseVersion(self.api.__version__) >= "0.16"': '''self.api.__version__ >= "0.16"'''
        "from distutils.version import LooseVersion": "''"

- "module-name": "pandas.compat.numpy.function"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        'LooseVersion(__version__) >= LooseVersion("1.17.0")': '''__version__ >= "1.17.0"'''
        "from distutils.version import LooseVersion": "''"

- "module-name": "pandas.compat.numpy"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        'LooseVersion("1.17")': '''"1.17"'''
        'LooseVersion("1.18")': '''"1.18"'''
        'LooseVersion("1.19")': '''"1.19"'''
        'LooseVersion("1.20")': '''"1.20"'''
        "LooseVersion(_np_version)": "'_np_version'"
        "from distutils.version import LooseVersion": "''"

- "module-name": "pandas.io.formats.printing"
  "anti-bloat":
    - "change_function":
        "enable_data_resource_formatter": "'(lambda enable: None)'"
      "description": "remove IPython reference"

- "module-name": "pandas.io.orc"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        'distutils.version.LooseVersion(pyarrow.__version__) < "0.13.0"': '''pyarrow.__version__ < "0.13.0"'''
        "import distutils": "''"

- "module-name": "sphinx.util.docutils"
  "anti-bloat":
    - "description": "remove useless distutils usage"
      "replacements":
        "__version_info__ = tuple(LooseVersion(docutils.__version__).version)": '''tuple(int(d) for d in docutils.__version__.split("."))'''
        "from distutils.version import LooseVersion": "''"

- "module-name": "distributed.scheduler"
  "anti-bloat":
    - "description": "remove cython support"
      "replacements":
        "from cython import compiled": "'raise ImportError'"
        "if compiled:": "'if False:'"

- "module-name": "pywt._pytesttester"
  "anti-bloat":
    - "description": "remove pywt testing framework"
      "module_code": |
        class PytestTester:
          def __init__(self, name):
            pass
- "module-name": "feedparser.html"
  "anti-bloat":
    - "change_function":
        "__parse_starttag": "textwrap.dedent(inspect.getsource(sgmllib.SGMLParser.parse_starttag))"
        "goahead": "textwrap.dedent(inspect.getsource(sgmllib.SGMLParser.goahead))"
      "context":
        - "import inspect"
        - "import textwrap"
        - "import sgmllib"
      "description": "use SGML code more naturally"
      "replacements":
        "__parse_starttag.__code__ = sgmllib.SGMLParser.parse_starttag.__code__": "'pass'"
        "def goahead(self, i):": "'def goahead(self, end):'"
        "goahead.__code__ = sgmllib.SGMLParser.goahead.__code__": "'pass'"

- "module-name": "certifi.core"
  "anti-bloat":
    - "description": "avoid using importlib.resources without need"
      "replacements":
        "from importlib.resources import path as get_path, read_text": "'raise ImportError'"

- "module-name": "tensorboard"
  "anti-bloat":
    - "change_function":
        "load_ipython_extension": "'(lambda ipython: None)'"
        "notebook": "'(lambda: None)'"
      "control_tags":
        - "allow_ipython"
      "description": "remove IPython reference"

- "module-name": "persistent._compat"
  "anti-bloat":
    - "description": "use own compilation for compatibility"
      "replacements":
        "os.environ.get('PURE_PYTHON')": '''"1"'''

- "module-name": "pkg_resources"
  "anti-bloat":
    - "description": "avoid using plistlib dependency on non-macOS"
      "replacements":
        "import plistlib": '''if sys.platform == "darwin": import plistlib'''

- "module-name": "zope.interface._compat"
  "anti-bloat":
    - "change_function":
        "_skip_under_py2": "'(lambda test_method: None)'"
        "_skip_under_py3k": "'(lambda test_method: None)'"
      "control_tags":
        - "allow_unittest"
      "description": "remove unittest reference"

- "module-name": "lxml"
  "implicit-imports":
    "depends":
      - ".builder"
      - ".etree"
      - ".objectify"
      - ".sax"
      - "._elementpath"

- "module-name": "lxml.etree"
  "implicit-imports":
    "depends":
      - "._elementpath"
      - "gzip"

- "module-name": "lxml.html"
  "implicit-imports":
    "depends":
      - ".html.clean"
      - ".html.diff"
      - ".etree"

- "module-name": "pendulum.locales"
  "implicit-imports":
    "depends":
      - ".*.locale"

- "module-name": "phonenumbers.data"
  "implicit-imports":
    "depends":
      - ".region_*"

- "module-name": "srsly.msgpack._packer"
  "implicit-imports":
    "depends":
      - "srsly.msgpack.util"

- "module-name": "anyio._core._eventloop"
  "implicit-imports":
    "depends":
      - "anyio._backends._asyncio"

- "module-name": "asyncpg.protocol.protocol"
  "implicit-imports":
    "depends":
      - "asyncpg.pgproto.pgproto"

- "module-name": "asyncpg.pgproto.pgproto"
  "implicit-imports":
    "depends":
      - "asyncpg.pgproto.exceptions"

- "module-name": "encodings"
  "implicit-imports":
    "depends":
      - ".idna"
      - ".base64_codec"
      - ".hex_codec"
      - ".rot_13"

- "module-name": "pathlib"
  "implicit-imports":
    "depends":
      - "ntpath"
      - "posixpath"

- "module-name": "importlib.metadata"
  "implicit-imports":
    "depends":
      - "email"

- "module-name": "urllib.request"
  "implicit-imports":
    "depends":
      - "http.client"

- "module-name": "_asyncio"
  "implicit-imports":
    "depends":
      - "asyncio"

- "module-name": "shelve"
  "implicit-imports":
    "depends":
      - "dbm.dumb"

- "module-name": "wsgiref.simple_server"
  "implicit-imports":
    "depends":
      - "http.server"

- "module-name": "shiboken6"
  "implicit-imports":
    "depends":
      - "argparse"

- "module-name": "wx"
  "implicit-imports":
    "disable_console": "macos"
    "standalone_macos_bundle_mode": "true"

- "module-name": "PySide2"
  "implicit-imports":
    "disable_console": "recommend"
    "standalone_macos_bundle_mode": "onefile"

- "module-name": "PySide6"
  "implicit-imports":
    "disable_console": "recommend"

- "module-name": "Tkinter"
  "implicit-imports":
    "disable_console": "recommend"
    "standalone_macos_bundle_mode": "onefile"

- "module-name": "tkinter"
  "implicit-imports":
    "disable_console": "recommend"
    "standalone_macos_bundle_mode": "onefile"

- "module-name": "dns.rdtypes"
  "implicit-imports":
    "depends":
      - ".IN.A"
      - ".CH.A"

- "module-name": "persistent.ring"
  "implicit-imports":
    "depends":
      - "_cffi_backend"

- "module-name": "pydantic.typing"
  "implicit-imports":
    "depends":
      - "typing_extensions"

- "module-name": "falcon.app"
  "implicit-imports":
    "depends":
      - ".app_helpers"
      - ".responders"
      - ".routing"

- "module-name": "falcon.request"
  "implicit-imports":
    "depends":
      - ".request_helpers"
      - ".forwarded"
      - ".media"

- "module-name": "falcon.media.handlers"
  "implicit-imports":
    "depends":
      - "falcon.vendor.mimeparse"

- "module-name": "falcon.response"
  "implicit-imports":
    "depends":
      - ".response_helpers"
