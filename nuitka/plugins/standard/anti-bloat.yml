- context:
  - import psutil
  description: resolve platform specific imports at compile time
  module-name: psutil
  replacements:
    from ._common import AIX: '''AIX = %r'' % psutil.AIX'
    from ._common import BSD: '''BSD = %r'' % psutil.BSD'
    from ._common import FREEBSD: '''FREEBSD = %r'' % + psutil.FREEBSD'
    from ._common import LINUX: '''LINUX = %r'' % + psutil.LINUX'
    from ._common import MACOS: '''MACOS = %r'' % + psutil.MACOS'
    from ._common import NETBSD: '''NETBSD = %r'' % + psutil.NETBSD'
    from ._common import OPENBSD: '''OPENBSD = %r'' % + psutil.OPENBSD'
    from ._common import OSX: '''OSX = %r'' % psutil.OSX'
    from ._common import POSIX: '''POSIX = %r'' % psutil.POSIX'
    from ._common import SUNOS: '''SUNOS = %r'' % psutil.SUNOS'
    from ._common import WINDOWS: '''WINDOWS = %r'' % psutil.WINDOWS'
- description: disable distutils hacks
  module-name: cffi.ffiplatform
  replacements:
    import setuptools: '''pass'''
- change_function:
    distutils_extension: '''(lambda: None)'''
  description: disable distutils extension build
  module-name: cffi.api
- change_function:
    _test: '''(lambda: None)'''
  description: remove pytest testing framework
  module-name: skimage
  replacements:
    imp.find_module('pytest'): '''None'''
- description: remove numpy testing framework
  module-name: sklearn.random_projection
  replacements:
    from numpy.testing import assert_equal: 'r''assert_equal = (lambda actual, desired,
      err_msg=None, verbose=True: True)'''
- description: remove pytest testing framework
  module-name: sklearn.utils._testing
  replacements_plain:
    _dummy = TestCase("__init__"): ''
    assert_dict_equal = _dummy.assert_dict_equal: 'def assert_dict_equal(*args, **kwargs):
      pass'
    assert_raises = _dummy.assertRaises: 'def assert_raises(*args, **kwargs): pass'
    assert_raises_regex = _dummy.assert_raises_regex: 'def assert_dict_equal(*args,
      **kwargs): pass'
    from unittest import TestCase: ''
    import pytest: raise ImportError
    import unittest: ''
    unittest.case.SkipTest: None
- description: remove skimage testing framework
  module-name: skimage._shared.tester
  module_code: "class PytestTester:\n  def __init__(self, name):\n    pass\n"
- change_function:
    _init_tests: '''None'''
    test: '''None'''
  description: remove setuptools and pytest testing framework reference
  module-name: matplotlib
  replacements:
    (root / ".git").exists()": '''None'''
    test.__test__ = False: ''
- change_function:
    _fix_ipython_backend2gui: '''(lambda cls: None)'''
  control_tags:
  - allow_ipython
  description: remove IPython reference
  module-name: matplotlib.backend_bases
- change_function:
    install_repl_displayhook: '''(lambda: None)'''
    uninstall_repl_displayhook: '''(lambda: None)'''
  control_tags:
  - allow_ipython
  description: remove IPython reference
  module-name: matplotlib.pyplot
- description: remove IPython reference
  module-name: PIL.ImageShow
  replacements:
    from IPython.display import display as ipython_display: '''raise ImportError'''
- context:
  - import numpy.distutils.misc_util
  description: remove numpy.distutils references
  module-name: numpy.ctypeslib
  replacements:
    from numpy.distutils.misc_util import get_shared_lib_extension: ''
    get_shared_lib_extension(): repr(numpy.distutils.misc_util.get_shared_lib_extension())
    get_shared_lib_extension(is_python_ext=True): repr(numpy.distutils.misc_util.get_shared_lib_extension(is_python_ext=True))
- description: remove numpy testing framework
  module-name: numpy.testing
  module_code: "from contextlib import contextmanager\nclass Tester:\n  test = None\n\
    \  bench = None\n\ndef assert_allclose(*args, **kwargs):\n  return True\n\n@contextmanager\n\
    def suppress_warnings(forwarding_rule=\"always\"):\n  yield\n\n@contextmanager\n\
    def _assert_warns_context(warning_class, name=None):\n    yield\n\ndef assert_warns(warning_class,\
    \ *args, **kwargs):\n  if not args:\n      return _assert_warns_context(warning_class)\n\
    \n  func = args[0]\n  args = args[1:]\n  with _assert_warns_context(warning_class,\
    \ name=func.__name__):\n      return func(*args, **kwargs)\n"
- description: remove numpy testing framework
  module-name: numpy._pytesttester
  module_code: "class PytestTester:\n  def __init__(self, name):\n    pass\n"
- description: remove numpy testing framework
  module-name: numpy.testing._private.pytesttester
  module_code: "class PytestTester:\n  def __init__(self, name):\n    pass\n"
- description: workaround numpy issues with compiled code
  module-name: numpy.core.overrides
  replacements:
    add_docstring(implementation, dispatcher.__doc__): '''''''add_docstring(implementation,
      dispatcher.__doc__ or '''')'''''''
    'public_api.__code__ = ': ''
- description: remove pydoc usage
  module-name: numpy.lib.utils
  replacements_plain:
    .pydoc.allmethods(object): ()
    import pydoc: ''
- description: remove numpy testing framework
  module-name: scipy.stats.morestats
  replacements:
    '@setastest(False)': ''
    from numpy.testing.decorators import setastest: ''
- description: remove numpy testing framework
  module-name: scipy.lib.numpy_compat
  replacements:
    NumpyVersion(np.__version__) > '1.7.0.dev': '''0'''
    from numpy.testing import suppress_warnings: 'r''suppress_warnings = __import__("contextmanager").contextmanager(lambda
      : (yield))'''
- description: remove numpy testing framework
  module-name: scipy._lib._numpy_compat
  replacements:
    NumpyVersion(np.__version__) > '1.7.0.dev': '''0'''
    from numpy.testing import suppress_warnings: 'r''suppress_warnings = __import__("contextmanager").contextmanager(lambda
      : (yield))'''
- description: remove numpy testing framework
  module-name: scipy._lib._testutils
  module_code: "class PytestTester:\n  def __init__(self, name):\n    pass\n"
- change_function:
    _copy_func: '''(lambda f: f)'''
  description: remove useless function copying
  module-name: scipy.integrate._quadrature
- description: remove useless distutils usage
  module-name: tensorflow
  replacements:
    _site.ENABLE_USER_SITE: '''False'''
    if _running_from_pip_package(): '''if False'''
    import distutils as _distutils: '''_distutils = None'''
    import site as _site: '''_site = None'''
- change_function:
    _copy_fn: '''(lambda fn: fn)'''
  description: remove useless function copying
  module-name: tensorflow.python.ops.distributions.distribution
  replacements:
    class_attr_value.__doc__ = _update_docstring: '''class_attr_value___doc__ = _update_docstring'''
- description: remove useless distutils usage
  module-name: tensorflow.python.framework.meta_graph
  replacements:
    distutils_version.LooseVersion: '''str'''
    from distutils import version as distutils_version: ''
- description: remove useless distutils usage
  module-name: tensorflow.python.compiler.tensorrt.utils
  replacements:
    distutils_version.LooseVersion: '''str'''
    from distutils import version as distutils_version: ''
- description: remove useless distutils usage
  module-name: tensorflow.lite.python.convert
  replacements:
    distutils.spawn.find_executable(_deprecated_conversion_binary) is None: '''False'''
    import distutils.spawn: ''
- change_function:
    postreleaser_before: '''(lambda data: None)'''
    prereleaser_middle: '''(lambda data: None)'''
  description: remove gevent release framework
  module-name: gevent._util
- change_function:
    _main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: inspect
- change_function:
    _main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: sysconfig
- change_function:
    _main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: ensurepip
- change_function:
    _main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: ensurepip._uninstall
- change_function:
    _main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: pyclbr
- change_function:
    gui: '''(lambda : None)'''
  description: remove module ability to display GUI with tkinter and topics data
  module-name: pydoc
  replacements:
    import pydoc_data.topics: '''raise ImportError'''
- change_function:
    _main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: mimetypes
- change_function:
    main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: tarfile
- change_function:
    main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: quopri
- change_function:
    main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: zipfile
- change_function:
    _test: '''(lambda: None)'''
    main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: gzip
- change_function:
    main: '''(lambda: None)'''
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: base64
- change_function:
    main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: ast
- change_function:
    main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: tokenize
- change_function:
    main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: keyword
- change_function:
    main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: tabnanny
- change_function:
    main: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: trace
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: uu
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: xmllib
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: mhlib
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: sgmllib
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: imghdr
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: audiodev
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: BaseHTTPServer
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: sndhdr
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: ftplib
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: mailcap
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: lib2to3.pgen2.literals
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: rexec
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: modulefinder
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: StringIO
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: fpformat
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: telnetlib
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: ctypes.util
- change_function:
    test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: formatter
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: pickletools
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: random
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: dis
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: threading
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: xml.sax.xmlreader.py
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: doctest
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: difflib
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: Cookie
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: locale
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: binhex
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: copy
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: pickle
- context:
  - import textwrap
  control_tags:
  - deployment
  description: enhanced tk-inter in case of missing tcl
  module-name: tkinter
  replacements:
    self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use): "textwrap.indent(\"\
      \"\"\ntry:\n  self.tk = _tkinter.create(screenName, baseName, className, interactive,\
      \ wantobjects, useTk, sync, use)\nexcept _tkinter.TclError as e:\n  if \"usable\
      \ init.tcl\" not in str(e):\n    raise\\n\\\n  sys.exit(\"Nuitka: Need to use\
      \ '--enable-plugin=tk-inter' option during compilation for tk-inter to work!\"\
      )\n\"\"\", \"        \")\n"
- change_function:
    _test: '''(lambda: None)'''
  description: remove module ability to run as a binary
  module-name: Bastion
- change_function:
    enable_ipython_completer: '''(lambda: None)'''
    run_tests: '''(lambda args=None: None)'''
  description: remove h5py testing framework and interactive IPython completer
  module-name: h5py
- description: remove pandas testing framework
  module-name: pandas
  replacements:
    from pandas.util._tester import test: ''
    import pandas.testing: ''
- change_function:
    ensure_clean: '''(lambda: None)'''
    external_error_raised: '''(lambda: None)'''
    network: '''(lambda: None)'''
    round_trip_localpath: '''(lambda: None)'''
    round_trip_pathlib: '''(lambda: None)'''
  description: remove pytest testing framework
  module-name: pandas._testing
- change_function:
    network: '''(lambda: None)'''
    round_trip_localpath: '''(lambda: None)'''
    round_trip_pathlib: '''(lambda: None)'''
  description: remove pytest testing framework
  module-name: pandas._testing._io
- description: remove useless distutils usage
  module-name: pandas.compat._optional
  replacements:
    distutils.version.LooseVersion(version) < minimum_version: '''False'''
    import distutils.version: ''''''
- description: remove useless distutils usage
  module-name: pandas.core.computation.ops
  replacements:
    NUMEXPR_VERSION < LooseVersion("2.6.9"): '''False'''
    from distutils.version import LooseVersion: ''''''
- description: remove useless distutils usage
  module-name: pandas.io.excel._base
  replacements:
    LooseVersion(xlrd.__version__): '''xlrd.__version__'''
    from distutils.version import LooseVersion: ''''''
- description: remove useless distutils usage
  module-name: pandas.core.util.numba_
  replacements:
    LooseVersion(numba.__version__) >= LooseVersion("0.49.0"): '''True'''
    from distutils.version import LooseVersion: ''''''
- description: remove useless distutils usage
  module-name: pandas.plotting._matplotlib.compat
  replacements:
    from distutils.version import LooseVersion: ''''''
    op(LooseVersion(mpl.__version__), LooseVersion(version)): '''op(mpl.__version__,
      version)'''
- description: remove useless distutils usage
  module-name: pandas.core.arrays._arrow_utils
  replacements:
    LooseVersion(pyarrow.__version__) >= LooseVersion("0.15"): '''pyarrow.__version__
      >= "0.15"'''
    from distutils.version import LooseVersion: ''''''
- description: remove useless distutils usage
  module-name: pandas.core.arrays.string_arrow
  replacements:
    LooseVersion(pa.__version__) < "1.0.0": '''pa.__version__ < "1.0.0"'''
    from distutils.version import LooseVersion: ''''''
- description: remove useless distutils usage
  module-name: pandas.io.parquet
  replacements:
    LooseVersion(self.api.__version__) >= "0.16": '''self.api.__version__ >= "0.16"'''
    from distutils.version import LooseVersion: ''''''
- description: remove useless distutils usage
  module-name: pandas.compat.numpy.function
  replacements:
    LooseVersion(__version__) >= LooseVersion("1.17.0"): '''__version__ >= "1.17.0"'''
    from distutils.version import LooseVersion: ''''''
- description: remove useless distutils usage
  module-name: pandas.compat.numpy
  replacements:
    LooseVersion("1.17"): '''"1.17"'''
    LooseVersion("1.18"): '''"1.18"'''
    LooseVersion("1.19"): '''"1.19"'''
    LooseVersion("1.20"): '''"1.20"'''
    LooseVersion(_np_version): '''_np_version'''
    from distutils.version import LooseVersion: ''''''
- change_function:
    enable_data_resource_formatter: '''(lambda enable: None)'''
  description: remove IPython reference
  module-name: pandas.io.formats.printing
- description: remove useless distutils usage
  module-name: pandas.io.orc
  replacements:
    distutils.version.LooseVersion(pyarrow.__version__) < "0.13.0": '''pyarrow.__version__
      < "0.13.0"'''
    import distutils: ''''''
- description: remove useless distutils usage
  module-name: sphinx.util.docutils
  replacements:
    __version_info__ = tuple(LooseVersion(docutils.__version__).version): '''tuple(int(d)
      for d in docutils.__version__.split("."))'''
    from distutils.version import LooseVersion: ''''''
- description: remove cython support
  module-name: distributed.scheduler
  replacements:
    from cython import compiled: '''raise ImportError'''
    'if compiled:': '''if False:'''
- description: remove pywt testing framework
  module-name: pywt._pytesttester
  module_code: "class PytestTester:\n  def __init__(self, name):\n    pass\n"
- change_function:
    __parse_starttag: textwrap.dedent(inspect.getsource(sgmllib.SGMLParser.parse_starttag))
    goahead: textwrap.dedent(inspect.getsource(sgmllib.SGMLParser.goahead))
  context:
  - import inspect
  - import textwrap
  - import sgmllib
  description: use SGML code more naturally
  module-name: feedparser.html
  replacements:
    __parse_starttag.__code__ = sgmllib.SGMLParser.parse_starttag.__code__: '''pass'''
    'def goahead(self, i):': '''def goahead(self, end):'''
    goahead.__code__ = sgmllib.SGMLParser.goahead.__code__: '''pass'''
- description: avoid using importlib.resources without need
  module-name: certifi.core
  replacements:
    from importlib.resources import path as get_path, read_text: '''raise ImportError'''
- change_function:
    load_ipython_extension: '''(lambda ipython: None)'''
    notebook: '''(lambda: None)'''
  control_tags:
  - allow_ipython
  description: remove IPython reference
  module-name: tensorboard
- description: use own compilation for compatibility
  module-name: persistent._compat
  replacements:
    os.environ.get('PURE_PYTHON'): '''"1"'''
- description: avoid using plistlib dependency on non-macOS
  module-name: pkg_resources
  replacements:
    import plistlib: '''if sys.platform == "darwin": import plistlib'''
- change_function:
    _skip_under_py2: '''(lambda test_method: None)'''
    _skip_under_py3k: '''(lambda test_method: None)'''
  control_tags:
  - allow_unittest
  description: remove unittest reference
  module-name: zope.interface._compat
- description: avoid useless duplication of traceback module
  module-name: eliot._traceback
  replacements:
    load_module(str("_traceback_no_io"), traceback): '''__import__("traceback")'''
- change_function:
    _test: '''(lambda: None)'''
  description: remove doctest usage
  module-name: pytz
- change_function:
    doctests: '''(lambda: None)'''
  description: remove doctest usage
  module-name: tornado.util
- change_function:
    doctests: '''(lambda: None)'''
  description: remove doctest usage
  module-name: tornado.iostream
- change_function:
    doctests: '''(lambda: None)'''
  description: remove doctest usage
  module-name: tornado.httputil
- context:
  - import textwrap
  - import pkgutil
  - from nuitka.utils.Importing import getSharedLibrarySuffix
  control_tags:
  - standalone_mode_only
  description: workaround for colliding native module import
  module-name: cv2
  replacements:
    load_first_config(['config.py'], True): textwrap.indent(pkgutil.get_data('cv2',
      'config.py').decode('utf8'), '    ') + textwrap.indent(pkgutil.get_data('cv2',
      'config-3.py').decode('utf8'), '    ')
    native_module = importlib.import_module("cv2.cv2"): '"import imp; native_module
      = imp.load_dynamic(\"cv2\", os.path.join(os.path.dirname(__file__), \"cv2%s\"))"
      % getSharedLibrarySuffix(False)'
  replacements_plain:
    ? 'load_first_config([

      '
    : 'if False: (['
- context:
  - import orderedmultidict.__version__
  description: remove manual version file import
  module-name: orderedmultidict
  replacements:
    exec(f.read(), meta): '''__version__ = %r'' % orderedmultidict.__version__.__version__'
  replacements_plain:
    with open(pjoin(dirname(__file__), '__version__.py')) as f: if True
